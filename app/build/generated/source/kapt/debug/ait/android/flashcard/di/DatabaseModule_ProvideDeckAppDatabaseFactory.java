// Generated by Dagger (https://dagger.dev).
package ait.android.flashcard.di;

import ait.android.flashcard.data.AppDatabase;
import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation"
})
public final class DatabaseModule_ProvideDeckAppDatabaseFactory implements Factory<AppDatabase> {
  private final DatabaseModule module;

  private final Provider<Context> appContextProvider;

  public DatabaseModule_ProvideDeckAppDatabaseFactory(DatabaseModule module,
      Provider<Context> appContextProvider) {
    this.module = module;
    this.appContextProvider = appContextProvider;
  }

  @Override
  public AppDatabase get() {
    return provideDeckAppDatabase(module, appContextProvider.get());
  }

  public static DatabaseModule_ProvideDeckAppDatabaseFactory create(DatabaseModule module,
      Provider<Context> appContextProvider) {
    return new DatabaseModule_ProvideDeckAppDatabaseFactory(module, appContextProvider);
  }

  public static AppDatabase provideDeckAppDatabase(DatabaseModule instance, Context appContext) {
    return Preconditions.checkNotNullFromProvides(instance.provideDeckAppDatabase(appContext));
  }
}
